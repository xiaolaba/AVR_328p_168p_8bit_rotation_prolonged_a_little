
twoMHz_square_wave.ino.out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003d  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b4  00000000  00000000  0000016f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000083  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000aa  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000af  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <clk_2MHz_4ch>:
int main(void);
void clk_2MHz_1ch(void);
void clk_2MHz_4ch(void);

void clk_2MHz_4ch(void) {
  __asm__ __volatile__ (          
  80:	f8 94       	cli
  82:	05 e5       	ldi	r16, 0x55	; 85
  84:	15 e5       	ldi	r17, 0x55	; 85
  86:	05 b9       	out	0x05, r16	; 5
  88:	07 95       	ror	r16
  8a:	15 b9       	out	0x05, r17	; 5
  8c:	17 95       	ror	r17
  8e:	fb cf       	rjmp	.-10     	; 0x86 <clk_2MHz_4ch+0x6>


  "rjmp 1b" "\n\t"      // 2 cycle, 2 byte, jump backward to label 1: inline asm code
//  "rjmp tick" "\n\t"    // no uses. 2 cycle, 2 byte, jump to named label 1, loop forever. g++ ok, gcc/asm NG. 
  );         
}
  90:	08 95       	ret

00000092 <clk_2MHz_1ch>:

void clk_2MHz_1ch(void) {

  __asm__ __volatile__ (          
  92:	f8 94       	cli
  94:	2d 9a       	sbi	0x05, 5	; 5
  96:	00 00       	nop
  98:	00 00       	nop
  9a:	2d 98       	cbi	0x05, 5	; 5
  9c:	fb cf       	rjmp	.-10     	; 0x94 <clk_2MHz_1ch+0x2>
  						// total 4 cycles HIGH, 4MHZ @ 16MHZ XTAL,

  //"rjmp tock "\n\t"     // no uses. 2 cycle

  );
}
  9e:	08 95       	ret

000000a0 <main>:


int main(void){
  // Arduino Nano 328p/168p, PB6/PB7 used for XTAL1/XTAL2, no IO pin exposed
  // PB5/4/3/2/1/0 used = Arduino pin 13/12/11/10/9/8
  DDRB = 0b00111111;  
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	84 b9       	out	0x04, r24	; 4
int main(void);
void clk_2MHz_1ch(void);
void clk_2MHz_4ch(void);

void clk_2MHz_4ch(void) {
  __asm__ __volatile__ (          
  a4:	f8 94       	cli
  a6:	05 e5       	ldi	r16, 0x55	; 85
  a8:	15 e5       	ldi	r17, 0x55	; 85
  aa:	05 b9       	out	0x05, r16	; 5
  ac:	07 95       	ror	r16
  ae:	15 b9       	out	0x05, r17	; 5
  b0:	17 95       	ror	r17
  b2:	fb cf       	rjmp	.-10     	; 0xaa <main+0xa>
#ifdef ch_x1
  clk_2MHz_1ch();
#endif

  return 0;
}
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
